#!/usr/bin/env python

import click
import json
import os
import sys


import aws_account_janitor.cloudformation as cloudformation
import aws_account_janitor.rds as rds
import aws_account_janitor.logs as cwlogs
import aws_account_janitor.ecr as ecr
import aws_account_janitor.resources as resources


@click.group()
@click.option('--dry_run', '-n', is_flag=True, help='dry run')
@click.pass_context
def cli(ctx, dry_run):
    ctx.obj['DRY_RUN'] = dry_run


# -----------------------------------------------------------------------------

@cli.group()
@click.pass_context
def cf(ctx):
    _cover_your_ass_because_dry_run_not_available(ctx)
    pass


@cf.command()
@click.option('--status', default='DELETE_IN_PROGRESS',
              help='status of cloudformation stacks to search for.')
@click.option('--timeout', default=120, help='Seconds after which waiting should timeout.')
def wait_for_stacks(status, timeout):
    cloudformation.wait_for_status_change(status=status, timeout=timeout)


@cf.command()
@click.option('--status', default='DELETE_FAILED',
              help='Status of cloudformation stack to search for.')
def cleanup_cf_stacks(status, interactive=True):
    cloudformation.cleanup(status=status, interactive=interactive)


# -----------------------------------------------------------------------------

@cli.group()
@click.pass_context
def rds(ctx):
    _cover_your_ass_because_dry_run_not_available(ctx)
    pass


@rds.command()
def cleanup_snapshots():
    rds.cleanup_snapshots(snapshot_type='manual')


# -----------------------------------------------------------------------------

@cli.group()
@click.pass_context
def ecr(ctx):
    _cover_your_ass_because_dry_run_not_available(ctx)
    pass


@ecr.command()
@click.option('--name', help='Repository Name')
def cleanup_ecr_images(name):
    ecr.purge_images(name)


# -----------------------------------------------------------------------------

@cli.group()
@click.pass_context
def logs(ctx):
    pass


@logs.command()
def orphans():
    print(json.dumps(cwlogs.list_not_used_log_groups()))


@logs.command()
@click.option('--retention', default=7, help='Retention in days for found log groups.')
@click.pass_context
def set_missing_log_retentions(ctx, retention):
    cwlogs.set_retention_for_missing(retention, dry_run=ctx.obj['DRY_RUN'])


# -----------------------------------------------------------------------------

@cli.group()
def tags():
    pass


@tags.command()
def list_resources():
    user = os.getenv('USER')
    tag_filters = [
        {
            'Key': 'owner',
            'Values': [user]
        }]
    result = resources.human_readable(resources.get(tag_filters))
    for r in result:
        print('{:10}: {} {}'.format(r['service'], r['name'], r['id']))


# -----------------------------------------------------------------------------

def _cover_your_ass_because_dry_run_not_available(ctx):
    if ctx.obj['DRY_RUN']:
        click.echo('DRY RUN not available for this command. Subcommand will be executed for real!')
        if not click.confirm('Do you want to continue?'):
            click.echo('Abort!')
            sys.exit(1)


if __name__ == '__main__':
    result = cli(obj={})
    if result:
        sys.exit(0)
    else:
        sys.exit(1)
